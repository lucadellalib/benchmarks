# ############################################################################
# Model: CRDNN with EnCodec audio representations (see https://arxiv.org/abs/2210.13438)
# Authors: Luca Della Libera 2023
# ############################################################################

experiment_name: encodec

# Seed needs to be set at top of YAML
seed: 0
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data preparation
data_folder: !PLACEHOLDER
train_csv: !ref <save_folder>/librimix_<num_speakers>mix_train-100.csv
valid_csv: !ref <save_folder>/librimix_<num_speakers>mix_dev.csv
test_csv: !ref <save_folder>/librimix_<num_speakers>mix_test.csv
splits: [train-100, dev, test]
num_speakers: 2
add_noise: False
version: wav16k/min

# Output folders
output_folder: !ref results/<experiment_name>/<seed>
save_folder: !ref <output_folder>/save

# Save options
vocode: True
save_audios: True

# Preprocessing parameters
train_remove_if_longer: 60.0  # Seconds
valid_remove_if_longer: 60.0  # Seconds
test_remove_if_longer: 60.0  # Seconds
sorting: ascending

# Training parameters
num_epochs: 10
grad_accumulation_factor: 1
dynamic_batching: False
train_batch_size: 16
valid_batch_size: 16
test_batch_size: 16
train_max_batch_length: 40.0  # Seconds
valid_max_batch_length: 40.0  # Seconds
test_max_batch_length: 40.0  # Seconds
num_buckets: 40
max_batch_size: 128
dataloader_workers: 4
nonfinite_patience: 10
max_grad_norm: 5.0
precision: fp16
ckpt_interval_minutes: 600
keep_checkpoints: 2
augment: True
augment_prob: 0.75
snr: 5  # dB

# Optimizer parameters
lr: 0.0005
weight_decay: 0.01
improvement_threshold: 0.0025
annealing_factor: 0.9
patient: 0
enable_scheduler: True

# EnCodec parameters
sample_rate: 24000  # NOTE: must match EnCodec's sample rate
vocab_size: 1024  # NOTE: must match EnCodec's codebook size
bandwidth: 1.5  # [1.5, 3.0, 6.0, 12.0, 24.0]
num_codebooks: 2  # NOTE: must match EnCodec's number of codebooks at the given bandwidth [2, 4, 8, 16, 32]

# Encoder parameters
embedding_dim: 128  # NOTE: if using pretrained embeddings, must match EnCodec's embedding size
freeze_embeddings: False
use_pretrained_embeddings: False
dropout: 0.1
activation: !name:torch.nn.LeakyReLU
rnn_class: !name:speechbrain.nnet.RNN.LSTM
rnn_layers: 4
time_pooling_size: 1
rnn_bidirectional: True
rnn_neurons: 256
dnn_blocks: 2
dnn_neurons: 256
cnn_blocks: 2
cnn_channels: (32, 32)
inter_layer_pooling_size: (2, 2)
cnn_kernelsize: (3, 3)

# Search parameters
valid_search_freq: 1

# Augmentation
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: 0  # Min frequency band dropout probability
    drop_freq_high: 1  # Max frequency band dropout probability
    drop_freq_count_low: 1  # Min number of frequency bands to drop
    drop_freq_count_high: 3  # Max number of frequency bands to drop
    drop_freq_width: 0.05  # Width of frequency bands to drop

drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: 1  # Min number of audio chunks to drop
    drop_length_high: 5  # Max number of audio chunks to drop
    drop_count_low: 1000  # Min length of audio chunks to drop
    drop_count_high: 2000  # Max length of audio chunks to drop

augmentation: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    repeat_augment: 1
    shuffle_augmentations: False
    min_augmentations: 2
    max_augmentations: 2
    augment_prob: !ref <augment_prob>
    augmentations: [!ref <drop_freq>, !ref <drop_chunk>]

# Modules
# EnCodec model (see https://huggingface.co/docs/transformers/v4.31.0/en/model_doc/encodec)
codec: !new:speechbrain.lobes.models.huggingface_transformers.encodec.Encodec
    source: facebook/encodec_24khz  # Only the 24kHz version supports mono audio
    save_path: !ref <save_folder>
    sample_rate: !ref <sample_rate>
    bandwidth: !ref <bandwidth>
    flat_embeddings: False
    freeze: True
    renorm_embeddings: False

embedding: !new:nnet.MultiHeadEmbedding
    num_heads: !ref <num_codebooks>
    num_embeddings: !ref <vocab_size>
    embedding_dim: !ref <embedding_dim>

encoder: !new:speechbrain.lobes.models.CRDNN.CRDNN
    input_shape: [null, null, !ref <embedding_dim>]
    activation: !ref <activation>
    dropout: !ref <dropout>
    cnn_blocks: !ref <cnn_blocks>
    cnn_channels: !ref <cnn_channels>
    cnn_kernelsize: !ref <cnn_kernelsize>
    inter_layer_pooling_size: !ref <inter_layer_pooling_size>
    time_pooling: True
    using_2d_pooling: False
    time_pooling_size: !ref <time_pooling_size>
    rnn_class: !ref <rnn_class>
    rnn_layers: !ref <rnn_layers>
    rnn_neurons: !ref <rnn_neurons>
    rnn_bidirectional: !ref <rnn_bidirectional>
    dnn_blocks: !ref <dnn_blocks>
    dnn_neurons: !ref <dnn_neurons>
    rnn_re_init: True
    use_rnnp: False

ce_head: !new:nnet.MultiHeadLinear
    num_heads: !ref <num_codebooks> * <num_speakers>
    in_features: !ref <dnn_neurons>
    out_features: !ref <vocab_size>

modules:
    codec: !ref <codec>
    embedding: !ref <embedding>
    encoder: !ref <encoder>
    ce_head: !ref <ce_head>

model: !new:torch.nn.ModuleList
    [[!ref <embedding>,
      !ref <encoder>,
      !ref <ce_head>]]

# Loss functions
ce_loss: !name:speechbrain.nnet.losses.nll_loss
    label_smoothing: 0.0
    allowed_len_diff: 0
    reduction: mean

# Optimizers
opt_class: !name:torch.optim.AdamW
    lr: !ref <lr>
    betas: (0.9, 0.98)
    eps: 1.e-8
    weight_decay: !ref <weight_decay>

# Schedulers
scheduler: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: !ref <improvement_threshold>
    annealing_factor: !ref <annealing_factor>
    patient: !ref <patient>

# Performance metrics
ter_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

# Counters, checkpointers, loggers, etc.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <num_epochs>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        scheduler: !ref <scheduler>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <output_folder>/train_log.txt
